select(county_fips, party, candidatevotes, totalvotes) %>%
filter(party == "REPUBLICAN" | party == "DEMOCRAT") %>%
drop_na() %>%
pivot_wider(names_from = party, values_from = candidatevotes) %>%
mutate(rep_frac = REPUBLICAN/totalvotes,
dem_frac = DEMOCRAT/totalvotes,
rep_margin = rep_frac-dem_frac) %>%
arrange(desc(rep_margin)) %>%
left_join(cchars, by = c("county_fips" = "fips")) %>%
mutate(fips = ifelse(str_length(fips) == 4, str_pad(fips, 4, "left", "0"))) %>%
clean_names()
# join county sociodems with election results
cfull <-
creturns %>%
filter(mode == "TOTAL") %>%
select(county_fips, party, candidatevotes, totalvotes) %>%
filter(party == "REPUBLICAN" | party == "DEMOCRAT") %>%
drop_na() %>%
pivot_wider(names_from = party, values_from = candidatevotes) %>%
mutate(rep_frac = REPUBLICAN/totalvotes,
dem_frac = DEMOCRAT/totalvotes,
rep_margin = rep_frac-dem_frac) %>%
arrange(desc(rep_margin)) %>%
left_join(cchars, by = c("county_fips" = "fips")) %>%
mutate(county_fips =
ifelse(str_length(county_fips) == 4,
str_pad(county_fips, 4, "left", "0"))) %>%
clean_names()
# join county sociodems with election results
cfull <-
creturns %>%
filter(mode == "TOTAL") %>%
select(county_fips, party, candidatevotes, totalvotes) %>%
filter(party == "REPUBLICAN" | party == "DEMOCRAT") %>%
drop_na() %>%
pivot_wider(names_from = party, values_from = candidatevotes) %>%
mutate(rep_frac = REPUBLICAN/totalvotes,
dem_frac = DEMOCRAT/totalvotes,
rep_margin = rep_frac-dem_frac) %>%
arrange(desc(rep_margin)) %>%
left_join(cchars, by = c("county_fips" = "fips")) %>%
mutate(county_fips =
ifelse(str_length(county_fips) == 4,
str_pad(county_fips, 4, "left", "0"), county_fips)) %>%
clean_names()
# bind daily covid data
covid <-
rbind(county_covid_2020, county_covid_2021, county_covid_2022) %>%
mutate(fips = str_remove(geoid, "USA-"))
rm(small)
# make smaller df with complete info
small_mob <-
mob %>%
filter(fips %in% ckeeps)
# join to daily mobility
daily_measures <-
small_mob %>%
left_join(covid, by = c('date', 'fips'))
# join to daily mobility
daily_measures <-
covid %>%
left_join(small_mob, by = c('date', 'fips'))
saveRDS(daily_measures, file = "county_covid_rates_and_mobility.rds")
fn <- function(x, y){
(1/(2^(x+1)))*(1/(2^(y+1)))
}
fn(x = 0, y = 7)
fn(x = 0, y = 7)
fn(x = 1, y = 6)
fn(x = 2, y = 5)
fn(x = 3, y = 4)
fn(x = 4, y = 3)
fn(x = 5, y = 2)
fn(x = 6, y = 1)
fn(x = 7, y = 0)
fn(x = 7, y = 0)*8
`/`18
1/128
2/128
1/64
?floor
?is.ordered
a <- c(0, 1, 0, 1, 1)
is.numeric(a)
is.integer(a_)
is.integer(a)
.22/(.22+1)
(.22*0.3)/(.22+1)
# get and clean subsidy data
library(janitor)
library(tidyverse)
# load batch data
load("C:/Users/eichi/Desktop/us_subsidies/web_scraping/batch1of4_subsidy_characteristics.RData")
load("C:/Users/eichi/Desktop/us_subsidies/web_scraping/batch2of4_subsidy_characteristics.RData")
load("C:/Users/eichi/Desktop/us_subsidies/web_scraping/batch3of4_subsidy_characteristics.RData")
load("C:/Users/eichi/Desktop/us_subsidies/web_scraping/batch4of4_subsidy_characteristics.RData")
# get rid of "value_of_exempted_property" variable in batches 1 and 2
batch1df <- select(batch1df, -value_of_exempted_property)
batch2df <- select(batch2df, -value_of_exempted_property)
# for each batchdf, organize columns by alphabet (for easy rbinding)
batch1df <- batch1df %>% select(order(colnames(.)))
batch2df <- batch2df %>% select(order(colnames(.)))
batch3df <- batch3df %>% select(order(colnames(.)))
batch4df <- batch4df %>% select(order(colnames(.)))
# bind batch info and get rid of duplicates
df <- rbind(batch1df, batch2df, batch3df, batch4df) %>% distinct()
# get total subsidies, by county-industry
df_clean <-
df %>%
rename(naics = naics_industry_code) %>%
filter(!is.na(county)) %>%
mutate(county = ifelse(!is.na(county), str_c(county, "County", sep = " "), county),
county = str_to_title(county),
subsidy_value = str_remove_all(subsidy_value, "[$,]"),
subsidy_value = as.numeric(subsidy_value),
naics = str_remove_all(naics, "[A-Za-z]"),
naics = str_remove_all(naics, "[-]"),
naics = str_trim(naics)) %>%
select(case, year, city, company, county, location, major_industry_of_parent,
specific_industry_of_parent, naics, subsidy_value,
type_of_subsidy, wage_data, wage_data_type, number_of_jobs_or_training_slots,
project_description)
# get total subsidies, by county-industry
csubs_by_major <-
df_clean %>%
group_by(county, major_industry_of_parent) %>%
reframe(tsubs = sum(subsidy_value, na.rm = TRUE))
View(csubs_by_major)
library(tigris)
head(fips_codes)
# clean a little bit
df_clean <-
df %>%
rename(naics = naics_industry_code) %>%
filter(!is.na(county)) %>%
mutate(county = ifelse(!is.na(county), str_c(county, "County", sep = " "), county),
county = str_to_title(county),
subsidy_value = str_remove_all(subsidy_value, "[$,]"),
subsidy_value = as.numeric(subsidy_value),
naics = str_remove_all(naics, "[A-Za-z]"),
naics = str_remove_all(naics, "[-]"),
naics = str_trim(naics)) %>%
select(case, year, city, company, county, location, major_industry_of_parent,
specific_industry_of_parent, naics, subsidy_value,
type_of_subsidy, wage_data, wage_data_type, number_of_jobs_or_training_slots,
project_description) %>%
left_join(fips_codes, by = c('county', 'location' = 'state_name'))
# clean a little bit
df_clean <-
df %>%
rename(naics = naics_industry_code) %>%
filter(!is.na(county)) %>%
mutate(county = ifelse(!is.na(county), str_c(county, "County", sep = " "), county),
county = str_to_title(county),
subsidy_value = str_remove_all(subsidy_value, "[$,]"),
subsidy_value = as.numeric(subsidy_value),
naics = str_remove_all(naics, "[A-Za-z]"),
naics = str_remove_all(naics, "[-]"),
naics = str_trim(naics)) %>%
select(case, year, city, company, county, location, major_industry_of_parent,
specific_industry_of_parent, naics, subsidy_value,
type_of_subsidy, wage_data, wage_data_type, number_of_jobs_or_training_slots,
project_description) %>%
left_join(fips_codes, by = c('county', 'location' = 'state_name')) %>%
mutate(fips = str_c(state_code, county_code))
# get total subsidies, by county-industry
csubs_by_major <-
df_clean %>%
group_by(state, state_code, county, county_code, fips, major_industry_of_parent) %>%
reframe(tsubs = sum(subsidy_value, na.rm = TRUE))
View(csubs_by_major)
# get total subsidies by county
county_subs <-
df_clean %>%
group_by(state, state_code, county, county_code, fips) %>%
reframe(tsubs = sum(subsidy_value, na.rm = TRUE))
# get total subsidies by county
countysubs <-
df_clean %>%
group_by(state, state_code, county, county_code, fips) %>%
reframe(tsubs = sum(subsidy_value, na.rm = TRUE))
countysubs_by_major <-
df_clean %>%
group_by(state, state_code, county, county_code, fips, major_industry_of_parent) %>%
reframe(tsubs = sum(subsidy_value, na.rm = TRUE))
# identify obs with multiple naics
g <- agg_industries %>%
filter(str_detect(naics, ","))
# identify obs with multiple naics
g <- df_clean %>%
filter(str_detect(naics, ","))
# make container
dubs <- list()
# loop over obs with multiple naics
for(i in 1:nrow(g)){
# split string into individual naics
s <- as.character(str_split(g$naics[i], pattern = ", ", simplify = T))
# if check for naics being more than 1
if(length(s) > 1){
print("yes")
# for each naics in set of naics
for(j in s){
# add a new row
# code for relevant information in the original data
# e.g., location, year, case, subsidy amount, etc.
dubs[[length(dubs)+1]] <-
data.frame(case = g$case[i], year = g$year[i],
location = g$location[i],
type_of_subsidy = g$type_of_subsidy[i],
subsidy_value = g$subsidy_value[i]/length(s),
naics = j,
specific_industry_of_parent = g$specific_industry_of_parent[i],
major_industry_of_parent = g$major_industry_of_parent[i])
}
}
# ifelse for last case
if(i == nrow(g)){
# unravel list into df
temp <- do.call(rbind, dubs)
}
}
# put new data back into original df; get rid of multi-naics obs
naics_subs <-
df_clean %>%
filter(!str_detect(naics, ",") | is.na(naics)) %>%
add_row(temp)
# clean a little bit
df_clean <-
df %>%
rename(naics = naics_industry_code) %>%
filter(!is.na(county), year >= 2002) %>%
mutate(county = ifelse(!is.na(county), str_c(county, "County", sep = " "), county),
county = str_to_title(county),
subsidy_value = str_remove_all(subsidy_value, "[$,]"),
subsidy_value = as.numeric(subsidy_value),
naics = str_remove_all(naics, "[A-Za-z]"),
naics = str_remove_all(naics, "[-]"),
naics = str_trim(naics)) %>%
select(case, year, city, company, county, location, major_industry_of_parent,
specific_industry_of_parent, naics, subsidy_value,
type_of_subsidy, wage_data, wage_data_type, number_of_jobs_or_training_slots,
project_description) %>%
left_join(fips_codes, by = c('county', 'location' = 'state_name')) %>%
mutate(fips = str_c(state_code, county_code))
# major industries --------------------
# get total subsidies by county
countysubs <-
df_clean %>%
group_by(state, state_code, county, county_code, fips) %>%
reframe(tsubs = sum(subsidy_value, na.rm = TRUE))
# categorize subsidies by major industry
countysubs_by_major <-
df_clean %>%
group_by(state, state_code, county, county_code, fips, major_industry_of_parent) %>%
reframe(tsubs = sum(subsidy_value, na.rm = TRUE))
# identify obs with multiple naics
g <- df_clean %>%
filter(str_detect(naics, ","))
# make container
dubs <- list()
# loop over obs with multiple naics
for(i in 1:nrow(g)){
# split string into individual naics
s <- as.character(str_split(g$naics[i], pattern = ", ", simplify = T))
# if check for naics being more than 1
if(length(s) > 1){
print("yes")
# for each naics in set of naics
for(j in s){
# add a new row
# code for relevant information in the original data
# e.g., location, year, case, subsidy amount, etc.
dubs[[length(dubs)+1]] <-
data.frame(case = g$case[i], year = g$year[i],
location = g$location[i],
type_of_subsidy = g$type_of_subsidy[i],
subsidy_value = g$subsidy_value[i]/length(s),
naics = j,
specific_industry_of_parent = g$specific_industry_of_parent[i],
major_industry_of_parent = g$major_industry_of_parent[i])
}
}
# ifelse for last case
if(i == nrow(g)){
# unravel list into df
temp <- do.call(rbind, dubs)
}
}
# put new data back into original df; get rid of multi-naics obs
naics_subs <-
df_clean %>%
filter(!str_detect(naics, ",") | is.na(naics)) %>%
add_row(temp)
# total subsidies by county-naics
subs_by_counties_and_naics <-
naics_subs %>%
group_by(state, state_code, county, county, fips, naics) %>%
reframe(tsubs = sum(subsidy_value, na.rm = TRUE))
# total subsidies by county-naics
subs_by_counties_and_naics <-
naics_subs %>%
group_by(state, state_code, county, county_code, fips, naics) %>%
reframe(tsubs = sum(subsidy_value, na.rm = TRUE))
# total subsidies by county-naics
countysubs_by_naics <-
naics_subs %>%
group_by(state, state_code, county, county_code, fips, naics) %>%
reframe(tsubs = sum(subsidy_value, na.rm = TRUE))
View(countysubs_by_naics)
countysubs_by_naics %>% filter(str_detect(county, ","))
countysubs_by_naics %>% filter(str_detect(county, ",")) %>% view()
countysubs_by_naics %>%
count(state, naics)
countysubs_by_naics %>%
count(state, naics) %>%
arrange(desc(n)) %>% view()
unique(countysubs_by_naics$state)
View(df)
# libraries
library(janitor)
library(tidyverse)
library(tigris)
# load batch data
load("C:/Users/eichi/Desktop/subsidy_dataset/web_scraping/batch1of4_subsidy_characteristics.RData")
load("C:/Users/eichi/Desktop/subsidy_dataset/web_scraping/batch2of4_subsidy_characteristics.RData")
load("C:/Users/eichi/Desktop/subsidy_dataset/web_scraping/batch3of4_subsidy_characteristics.RData")
load("C:/Users/eichi/Desktop/subsidy_dataset/web_scraping/batch4of4_subsidy_characteristics.RData")
# get rid of "value_of_exempted_property" variable in batches 1 and 2
batch1df <- select(batch1df, -value_of_exempted_property)
batch2df <- select(batch2df, -value_of_exempted_property)
# for each batchdf, organize columns by alphabet (for easy rbinding)
batch1df <- batch1df %>% select(order(colnames(.)))
batch2df <- batch2df %>% select(order(colnames(.)))
batch3df <- batch3df %>% select(order(colnames(.)))
batch4df <- batch4df %>% select(order(colnames(.)))
# bind batch info and get rid of duplicates
df <- rbind(batch1df, batch2df, batch3df, batch4df) %>% distinct()
getwd()
setwd("C:/Users/eichi/Desktop/subsidy_dataset")
# clean a little bit
df_clean <-
df %>%
rename(naics = naics_industry_code) %>%
filter(!is.na(county), year >= 2002) %>%
mutate(county = ifelse(!is.na(county), str_c(county, "County", sep = " "), county),
county = str_to_title(county),
subsidy_value = str_remove_all(subsidy_value, "[$,]"),
subsidy_value = as.numeric(subsidy_value),
naics = str_remove_all(naics, "[A-Za-z]"),
naics = str_remove_all(naics, "[-]"),
naics = str_trim(naics)) %>%
select(case, year, city, company, county, location, major_industry_of_parent,
specific_industry_of_parent, naics, subsidy_value,
type_of_subsidy, wage_data, wage_data_type, number_of_jobs_or_training_slots,
project_description) %>%
left_join(fips_codes, by = c('county', 'location' = 'state_name')) %>%
mutate(fips = str_c(state_code, county_code))
setwd("C:/Users/eichi/Desktop/subsidy_dataset/subsidy_cleaning")
# libraries
library(janitor)
library(tidyverse)
library(tigris)
setwd("C:/Users/eichi/Desktop/subsidy_dataset/subsidy_cleaning")
# load batch data
load("C:/Users/eichi/Desktop/subsidy_dataset/web_scraping/batch1of4_subsidy_characteristics.RData")
load("C:/Users/eichi/Desktop/subsidy_dataset/web_scraping/batch2of4_subsidy_characteristics.RData")
load("C:/Users/eichi/Desktop/subsidy_dataset/web_scraping/batch3of4_subsidy_characteristics.RData")
load("C:/Users/eichi/Desktop/subsidy_dataset/web_scraping/batch4of4_subsidy_characteristics.RData")
# get rid of "value_of_exempted_property" variable in batches 1 and 2
batch1df <- select(batch1df, -value_of_exempted_property)
batch2df <- select(batch2df, -value_of_exempted_property)
# for each batchdf, organize columns by alphabet (for easy rbinding)
batch1df <- batch1df %>% select(order(colnames(.)))
batch2df <- batch2df %>% select(order(colnames(.)))
batch3df <- batch3df %>% select(order(colnames(.)))
batch4df <- batch4df %>% select(order(colnames(.)))
# bind batch info and get rid of duplicates
df <- rbind(batch1df, batch2df, batch3df, batch4df) %>% distinct()
# clean a little bit
df_clean <-
df %>%
rename(naics = naics_industry_code) %>%
filter(!is.na(county), year >= 2002) %>%
mutate(county = ifelse(!is.na(county), str_c(county, "County", sep = " "), county),
county = str_to_title(county),
subsidy_value = str_remove_all(subsidy_value, "[$,]"),
subsidy_value = as.numeric(subsidy_value),
naics = str_remove_all(naics, "[A-Za-z]"),
naics = str_remove_all(naics, "[-]"),
naics = str_trim(naics)) %>%
select(case, year, city, company, county, location, major_industry_of_parent,
specific_industry_of_parent, naics, subsidy_value,
type_of_subsidy, wage_data, wage_data_type, number_of_jobs_or_training_slots,
project_description) %>%
left_join(fips_codes, by = c('county', 'location' = 'state_name')) %>%
mutate(fips = str_c(state_code, county_code))
# clean a little bit
df_clean <-
df %>%
rename(naics = naics_industry_code) %>%
filter(!is.na(county), year >= 2000) %>%
mutate(county = ifelse(!is.na(county), str_c(county, "County", sep = " "), county),
county = str_to_title(county),
subsidy_value = str_remove_all(subsidy_value, "[$,]"),
subsidy_value = as.numeric(subsidy_value),
naics = str_remove_all(naics, "[A-Za-z]"),
naics = str_remove_all(naics, "[-]"),
naics = str_trim(naics)) %>%
select(case, year, city, company, county, location, major_industry_of_parent,
specific_industry_of_parent, naics, subsidy_value,
type_of_subsidy, wage_data, wage_data_type, number_of_jobs_or_training_slots,
project_description) %>%
left_join(fips_codes, by = c('county', 'location' = 'state_name')) %>%
mutate(fips = str_c(state_code, county_code))
# major industries --------------------
# get total subsidies by county
countysubs <-
df_clean %>%
group_by(state, state_code, county, county_code, fips) %>%
reframe(tsubs = sum(subsidy_value, na.rm = TRUE))
# categorize subsidies by major industry
countysubs_by_major <-
df_clean %>%
group_by(state, state_code, county, county_code, fips, major_industry_of_parent) %>%
reframe(tsubs = sum(subsidy_value, na.rm = TRUE))
View(countysubs)
# categorize subsidies by major industry
countysubs_by_major <-
df_clean %>%
group_by(state, state_code, county, county_code, fips, major_industry_of_parent) %>%
reframe(tsubs = sum(subsidy_value, na.rm = TRUE))
# naics -------------------------
# among the many issues with the data, some obs have multiple naics
# easily identified, but need to be addressed
# split naics string into individual industries; get subsidy value in total
# given n individual naics, subsidy value for each is val/n
# add n new rows
agg_industries %>%
count(naics) %>%
arrange(desc(n)) %>%
view()
# naics -------------------------
# among the many issues with the data, some obs have multiple naics
# easily identified, but need to be addressed
# split naics string into individual industries; get subsidy value in total
# given n individual naics, subsidy value for each is val/n
# add n new rows
df_Clean %>%
count(naics) %>%
arrange(desc(n)) %>%
view()
# naics -------------------------
# among the many issues with the data, some obs have multiple naics
# easily identified, but need to be addressed
# split naics string into individual industries; get subsidy value in total
# given n individual naics, subsidy value for each is val/n
# add n new rows
df_clean %>%
count(naics) %>%
arrange(desc(n)) %>%
view()
# identify obs with multiple naics
g <- df_clean %>%
filter(str_detect(naics, ","))
# make container
dubs <- list()
# loop over obs with multiple naics
for(i in 1:nrow(g)){
# split string into individual naics
s <- as.character(str_split(g$naics[i], pattern = ", ", simplify = T))
# if check for naics being more than 1
if(length(s) > 1){
print("yes")
# for each naics in set of naics
for(j in s){
# add a new row
# code for relevant information in the original data
# e.g., location, year, case, subsidy amount, etc.
dubs[[length(dubs)+1]] <-
data.frame(case = g$case[i], year = g$year[i],
location = g$location[i],
type_of_subsidy = g$type_of_subsidy[i],
subsidy_value = g$subsidy_value[i]/length(s),
naics = j,
specific_industry_of_parent = g$specific_industry_of_parent[i],
major_industry_of_parent = g$major_industry_of_parent[i])
}
}
# ifelse for last case
if(i == nrow(g)){
# unravel list into df
temp <- do.call(rbind, dubs)
}
}
# put new data back into original df; get rid of multi-naics obs
naics_subs <-
df_clean %>%
filter(!str_detect(naics, ",") | is.na(naics)) %>%
add_row(temp)
# total subsidies by county-naics
countysubs_by_naics <-
naics_subs %>%
group_by(state, state_code, county, county_code, fips, naics) %>%
reframe(tsubs = sum(subsidy_value, na.rm = TRUE))
countysubs_by_naics %>%
count(state, naics) %>%
arrange(desc(n)) %>% view()
write_csv(county_subs, file = "county_total_subsidies_after_2000.csv")
write_csv(countysubs, file = "county_total_subsidies_after_2000.csv")
write_csv(countysubs, file = "county_subsidies_after_2000.csv")
write_csv(countysubs_by_major, file = "county_subsidies_by_major_industry_after_2000.csv")
write_csv(countysubs_by_naics, "county_subsidies_by_sixdigit_naics_after_2000.csv")
